#---
#- name: Install Nginx
#  ansible.builtin.package:
#    name: nginx
#    state: present
#    become: yes

---
- name: For Deb-based.
  block: ##### Deb-based #####
   - name: Install nginx
     apt:
        pkg: nginx
     become: yes
  when: ansible_os_family == "Debian" or ansible_os_family == "Ubuntu"

- name: For Centos
  block: ##### CentOS #####
   - name: Install EPEL
     yum: 
        pkg: epel-release
   - name: Install Nginx
     yum:
        pkg: epel-release
  when: ansible_os_family == "CentOS" or ansible_os_family == "RedHat"

- name: Backup current configs
  community.general.archive:
    path: "{{ etc_nginx }}/"
    dest: "/tmp/nginx_conf-{{ ansible_date_time.epoch }}.tgz"
    mode: '0640'
  register: archive_results

- name: Add nginx configs
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0640'
  loop:
    - { src: '{{ nginx_env }}/nginx.j2', dest: '{{ etc_nginx }}/nginx.conf' }
      #    - { src: '{{ nginx_env }}/nginx-balancers.j2', dest: '{{ nginx_conf_path }}/nginx-balancers.conf' }
      #    - { src: '{{ nginx_env }}/anti_rebinding.j2', dest: '{{ nginx_conf_path }}/anti_rebinding.conf' }
      #    - { src: '{{ nginx_env }}/ssl.j2', dest: '{{ etc_nginx }}/ssl.conf' }
      #    - { src: '{{ nginx_env }}/proxy.j2', dest: '{{ etc_nginx }}/proxy.conf' }

- name: Check and apply or rollback nginx config
  block:
    - name: Check nginx config
      ansible.builtin.shell: 'nginx -t'
      args:
        warn: no
      register: nginx_config_status
      changed_when: False

    - name: Reload nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
  rescue:
    - name: Clean nginx config
      ansible.builtin.file:
        path: "{{ etc_nginx }}/"
        state: absent

    - name: Create nginx directory
      ansible.builtin.file:
        path: "{{ etc_nginx }}"
        state: directory
        mode: 0755

    - name: Restore if incorrect new configs
      ansible.builtin.unarchive:
        src: "{{ archive_results.dest }}"
        dest: "{{ etc_nginx }}"
        remote_src: yes

    - name: Delete uncorrect backup
      ansible.builtin.file:
        path: "{{ archive_results.dest }}"
        state: absent

    - name: Set failure
      ansible.builtin.fail:
        msg: Nginx test config fail. ERROR:{{ nginx_config_status.stderr }}
